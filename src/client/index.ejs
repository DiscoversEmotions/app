<!DOCTYPE html>
<html>

  <head>
    <meta charset="utf-8">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <style>
      html, body {
        height: 100%;
        overflow: hidden;
        background: black;
        color: white;
        margin: 0;
        padding: 0;
      }
      #app-canvas {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }
      #app-ui {
        position: absolute;
      }
      #basic-boot {
        position: fixed;
        right: 20px;
        bottom: 20px;
        height: 160px;
        width: 400px;
        overflow: hidden;
      }
      #basic-boot span {
        height: 20px;
        display: block;
        font-family: monospace;
        text-align: right;
        padding: 0;
        margin: 0;
      }
    </style>
  </head>

  <body>
    <div id="app-canvas"></div>
    <div id="app-ui">
      [here should be a very cool loader]
    </div>
    <div id="basic-boot">
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
    </div>
    <script type="text/javascript">
      var HAS_PERFORMANCE_NOW = (typeof performance !== 'undefined' && performance.now);
      var currentTime = HAS_PERFORMANCE_NOW ? () => performance.now() : () => new Date().getTime();
      window.__START_TIME = currentTime();
      window.__MESSAGES = [];

      var container = document.getElementById('basic-boot');

      function addSpanMessage (content) {
        var spanElem = document.createElement('span');
        spanElem.innerHTML = content;
        container.appendChild(spanElem);
      }

      var messagesRenderer = {
        boot: function  (msg) {
          return 'Connecting to the brain'
        },
        yolo: function (msg) {
          return 'Yolo'
        }
      }

      function update () {
        // Remove span
        var spans = [].map.call(container.childNodes, function(element) { return element; })
        spans = spans.filter(function  (item) {
          return item.tagName === 'SPAN';
        })
        if (spans.length >= 7) {
          var spanToRemove = spans.slice(0, -7);
          for (var i = 0; i < spanToRemove.length; i++) {
            var span = spanToRemove[i];
            span.parentElement.removeChild(span);
          }
        }

        // Add message
        var lastMessage = window.__MESSAGES.length > 0 ? window.__MESSAGES[window.__MESSAGES.length - 1] : null;
        if (lastMessage === null) {
          var msg = { key: 'boot' };
          window.__MESSAGES.push();
          addSpanMessage(messagesRenderer['boot'](msg));
        }
        // else
        // if (lastMessage.key === 'boot') {
        //   var content = 'This is the yolo !'
        //   window.__MESSAGES.push({ key: 'yolo' });
        //   addSpanMessage();
        // } else
        // if (lastMessage === 'yolo') {
        //   MESSAGES.yolo.progress += Math.floor((Math.random() + 1) * 30);
        //   addSpanMessage(MESSAGES.yolo.content + MESSAGES.yolo.progress);
        // }
        window.__BOOT_TIMER = setTimeout(update, 500);
      }

      update();

    </script>
  </body>

</html>
