<!DOCTYPE html>
<html>

  <head>
    <meta charset="utf-8">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <style>
      html, body {
        height: 100%;
        overflow: hidden;
        background: black;
        color: white;
        margin: 0;
        padding: 0;
      }
      #app-canvas {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }
      #app-ui {
        position: absolute;
      }
      #basic-boot {
        position: fixed;
        right: 20px;
        bottom: 20px;
        height: 160px;
        width: 400px;
        overflow: hidden;
      }
      #basic-boot span {
        height: 20px;
        display: block;
        font-family: monospace;
        text-align: right;
        padding: 0;
        margin: 0;
      }
    </style>
  </head>

  <body>
    <div id="app-canvas"></div>
    <div id="app-ui">
      [here should be a very cool loader]
    </div>
    <div id="basic-boot">
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
    </div>
    <script type="text/javascript">
      var numberOfMessages = 8;
      var HAS_PERFORMANCE_NOW = (typeof performance !== 'undefined' && performance.now);
      var currentTime = HAS_PERFORMANCE_NOW ? () => performance.now() : () => new Date().getTime();
      var BOOT_TIMER = null;
      var BASIC_BOOT_STOPED = false;

      var container = document.getElementById('basic-boot');
      // Get spans
      var spans = [].map.call(container.childNodes, function(element) { return element; })
      spans = spans.filter(function  (item) {
        return item.tagName === 'SPAN';
      });

      window.__START_TIME = currentTime();
      window.__MESSAGES = [
        { key: 'boot' }
      ];
      window.__STOP_BASIC_BOOT = function  () {
        BASIC_BOOT_STOPED = true;
        clearTimeout(window.BOOT_TIMER);
        container.parentElement.removeChild(container);
      }

      function addMessage (msg) {
        window.__MESSAGES.push(msg);
        if (window.__MESSAGES.length > numberOfMessages) {
          window.__MESSAGES = window.__MESSAGES.slice(-numberOfMessages);
        }
      }

      function renderMessage (msg) {
        if (msg === undefined) {
          return '';
        }
        switch (msg.key) {
          case 'boot':
            return 'Connecting to the brain'
          case 'yolo':
            if (msg.progress === 0) {
              return 'Yolo start';
            }
            return 'Yolo ' + msg.progress;
          default:
            return ''
        }
      }

      function render () {
        var messagesToDisplay = window.__MESSAGES.slice().reverse();
        for (var i = 0; i < numberOfMessages; i++) {
          var msg = messagesToDisplay[i];
          spans[(numberOfMessages - 1) - i].innerHTML = renderMessage(msg);
        }
      }

      function update () {
        console.log('BASIC_BOOT_STOPED', BASIC_BOOT_STOPED);
        // Add message
        var lastMessage = window.__MESSAGES[window.__MESSAGES.length - 1];
        switch (lastMessage.key) {
          case 'boot':
            addMessage({
              key: 'yolo',
              progress: 0
            });
            break;
          case 'yolo':
            addMessage({
              key: 'yolo',
              progress: lastMessage.progress + Math.floor((Math.random() + 1) * 30)
            });
            break;
        }
        render();
        BOOT_TIMER = setTimeout(update, 300);
      }

      render();
      BOOT_TIMER = setTimeout(update, 300);

    </script>
  </body>

</html>
