<!DOCTYPE html>
<html>

  <head>
    <meta charset="utf-8">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <link href="https://fonts.googleapis.com/css?family=Anonymous+Pro" rel="stylesheet">
    <style>
      html, body {
        height: 100%;
        overflow: hidden;
        background: black;
        color: white;
        margin: 0;
        padding: 0;
      }
      #app-canvas {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }
      #app-ui {
        position: absolute;
      }
      #basic-boot {
        position: fixed;
        padding: 0;
        bottom: 20px;
        right: 20px;
        height: 156px;
        width: 400px;
        overflow: hidden;
      }
      #basic-boot div {
        height: 26px;
        font-size: 16px;
        display: block;
        font-family: 'Anonymous Pro', monospace;
        text-align: right;
        padding: 0;
        margin: 0;
      }
    </style>
  </head>

  <body>
    <div id="app-canvas"></div>
    <div id="app-ui"></div>
    <div id="basic-boot">
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
    <script type="text/javascript">
      var numberOfMessages = 6;
      var HAS_PERFORMANCE_NOW = (typeof performance !== 'undefined' && performance.now);
      var currentTime = HAS_PERFORMANCE_NOW ? () => performance.now() : () => new Date().getTime();
      var BOOT_TIMER = null;
      var BASIC_BOOT_STOPED = false;

      var container = document.getElementById('basic-boot');
      // Get messagesElems
      var messagesElems = [].map.call(container.childNodes, function(element) { return element; })
      messagesElems = messagesElems.filter(function  (item) {
        return item.tagName === 'DIV';
      });

      window.__START_TIME = currentTime();
      window.__MESSAGES = [
        { key: 'boot' }
      ];
      window.__STOP_BASIC_BOOT = function  () {
        BASIC_BOOT_STOPED = true;
        clearTimeout(window.BOOT_TIMER);
        if (container) {
          container.parentElement.removeChild(container);
        }
      }

      function addMessage (msg) {
        window.__MESSAGES.push(msg);
        if (window.__MESSAGES.length > numberOfMessages) {
          window.__MESSAGES = window.__MESSAGES.slice(-numberOfMessages);
        }
      }

      function renderMessage (msg) {
        if (msg === undefined) {
          return '';
        }
        if (msg.key === `boot`) {
          return `Start Booting System`;
        }
        if (msg.key === `boot-progress`) {
          return 'Booting System... ' + Math.floor(msg.progress) + ' / 100';
        }
      }

      function render () {
        var messagesToDisplay = window.__MESSAGES.slice().reverse();
        for (var i = 0; i < numberOfMessages; i++) {
          var msg = messagesToDisplay[i];
          messagesElems[(numberOfMessages - 1) - i].innerHTML = renderMessage(msg);
        }
      }

      function update () {
        render();
        if (BASIC_BOOT_STOPED) {
          return;
        }
        // Add message
        var lastMessage = window.__MESSAGES[window.__MESSAGES.length - 1];
        if (lastMessage.key === `boot`) {
          addMessage({ key: 'boot-progress', progress: 0 });
        } else {
          var nextProgress = lastMessage.progress + 1;
          if (nextProgress > 99) {
            nextProgress = 99;
          }
          var time = 100;
          if (nextProgress > 80) {
            time = 100 + Math.pow(1.15, nextProgress - 40);
          }
          window.__MESSAGES[window.__MESSAGES.length - 1].progress = nextProgress;
          if (nextProgress === 99) {
            return; // stop loop
          }
          // addMessage({ key: 'boot', progress: nextProgress });
        }



        BOOT_TIMER = setTimeout(update, time);
      }

      document.addEventListener("DOMContentLoaded", function(event) {
        update();
      });
    </script>
    <% for (var chunk in htmlWebpackPlugin.files.chunks) { %>
    <script async src="<%= htmlWebpackPlugin.files.chunks[chunk].entry %>"></script>
    <% } %>
  </body>

</html>
